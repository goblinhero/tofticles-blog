<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024s on The adventures of Tofticles</title>
    <link>http://localhost:1313/2024/</link>
    <description>Recent content in 2024s on The adventures of Tofticles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Mar 2024 14:10:20 +0100</lastBuildDate><atom:link href="http://localhost:1313/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Levied Tax - an implementation</title>
      <link>http://localhost:1313/2024/levied-tax-an-implementation/</link>
      <pubDate>Mon, 18 Mar 2024 14:10:20 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/levied-tax-an-implementation/</guid>
      
        <description>&lt;p&gt;The last many posts have been about infrastructure, so this time around, I needed to do some actual code for actual domain issues. The code can be found &lt;a href=&#34;https://codeberg.org/Tofticles/Anex/pulls/40&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;what-is-levied-tax&#34;&gt;What is Levied Tax?&lt;/h4&gt;
&lt;p&gt;As many companies will know, you need to keep track of taxes, that you need to administer (and pay) for the local government/administration. The most general one in Denmark is Value Addded Tax (VAT) or &amp;lsquo;moms&amp;rsquo; in the local tongue.&lt;/p&gt;
&lt;p&gt;Whenever you sell for a hundred Danish crowns (DKK) you need to send twenty of those to the government. Likewise, whenever you buy for a hundred DKK for an expense that is eligible, you get the twenty DKK back.&lt;/p&gt;
&lt;h4 id=&#34;seems-like-a-lot-of-code-for-a-simple-concept&#34;&gt;Seems like a lot of code for a simple concept&lt;/h4&gt;
&lt;p&gt;Well, yes. But the problem is that it is not really a simple concept. The code here is only for registrering the amounts - later will come reporting of the amounts to the government and registrering the payment, creating settlements and statements showing you have calculated it correctly. And this is C#, so verbosity is the norm (at least it isn&amp;rsquo;t Java :P).&lt;/p&gt;
&lt;h4 id=&#34;supported-scenarios&#34;&gt;Supported scenarios&lt;/h4&gt;
&lt;p&gt;VAT in Denmark is generally 25%. However, historically it has changed and probably will again. This is why the applied percentage is put into a spearate table/type with support for taking effect at a specific time. Basically, you don&amp;rsquo;t want to end up in a situation where you cannot register new entries until you have everything registrered up to the date before the new percentage takes effect. Everything in bookkeeping can be both in the past, in the future and right now, so support for being able to do everything, everywhere all at once (I should really record that for a movie title, some time) is paramount. Also, generally you will want to be able to specify it for outgoing and ingoing VAT to make it easier to make the statement later. And if you are unlucky enough to be in Norway, you&amp;rsquo;ll want to be able to have several different types since the VAT for selling ice cream depends on whether it is consumed in the shop or brought outside&amp;hellip; (No really, that is perfectly normal.. in Norway).&lt;/p&gt;
&lt;h4 id=&#34;other-types-of-levied-tax&#34;&gt;Other types of levied tax&lt;/h4&gt;
&lt;p&gt;There are a lot of different taxes in Denmark at least - things like sugar tax, vehicle registration tax and the list goes on. This is the reasoning behind not simply calling the classes VAT and VAT Percentage.&lt;/p&gt;
&lt;p&gt;This is by no means the last code I&amp;rsquo;ll have to do on VAT - this is just the first building block.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Switching to MariaDB</title>
      <link>http://localhost:1313/2024/switching-to-mariadb/</link>
      <pubDate>Fri, 15 Mar 2024 07:27:12 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/switching-to-mariadb/</guid>
      
        <description>&lt;p&gt;The code for this post can be found &lt;a href=&#34;https://codeberg.org/Tofticles/Anex/pulls/37&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://codeberg.org/Tofticles/Anex/pulls/38&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up until now, I&amp;rsquo;ve used the &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostGre&lt;/a&gt; as the backing store for Anex. There are a few things that annoy me about it. It&amp;rsquo;s not something that makes it unviable or anything dire like that, but&amp;hellip; Table and column names have to be lowercase for everything to work out of the box.&lt;/p&gt;
&lt;p&gt;Everything in Dotnet is PascalCase for type names (which most the time translates to table names) and camelCase for variables. So, I ripped out PostGre in favour of &lt;a href=&#34;https://mariadb.org/&#34;&gt;MariaDB&lt;/a&gt;. As you can see from pull request, it was mostly a matter of correcting case on string constants and changing which .dll to use for the data access. The beauty of NHibernate.&lt;/p&gt;
&lt;p&gt;Since this was almost too easy - I decided to disable nullability from all the projects as well. While in theory, it should lead to better code - there is a lot of caveats. As soon as you have ORMs (using reflection etc.) and public endpoints involved, you basically have to put a ? after almost all reference types anyway - and then the point of nullability is moot, in my opinion at least.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Switching away from Github</title>
      <link>http://localhost:1313/2024/switching-away-from-github/</link>
      <pubDate>Thu, 14 Mar 2024 09:43:36 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/switching-away-from-github/</guid>
      
        <description>&lt;p&gt;After my delving into using Github for container registry, it kinda dawned on me that maybe now is the time to finally take the plunge and switch to fully open-sourced code repository hosting. It will cause a few issues and render a bit of work irrelevant, but hey-ho. Sometimes, it&amp;rsquo;s worthwhile to have your actions reflect your values.&lt;/p&gt;
&lt;h2 id=&#34;the-github-repository-stays&#34;&gt;The Github repository stays&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not a fan of erasing history - and as long as Github keeps it&amp;rsquo;s free hosting, my old Github projects will stay where they are. (Also, I&amp;rsquo;m lazy, and fixing all the links in previous blog posts will be another day). The blog will stay on Github for the foreseeable future.&lt;/p&gt;
&lt;h2 id=&#34;choosing-a-new-place-to-host-the-code&#34;&gt;Choosing a new place to host the code&lt;/h2&gt;
&lt;p&gt;Priorities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has to be hosted in Europe&lt;/li&gt;
&lt;li&gt;Has to be based on open-source&lt;/li&gt;
&lt;li&gt;No vendor-lockin&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-europe&#34;&gt;Why Europe?&lt;/h4&gt;
&lt;p&gt;Because freedom. Freedom from American tech giants. Freedom from America&amp;rsquo;s questionable practises from a legal perspective (Read: Patriot Act etc.).&lt;/p&gt;
&lt;h4 id=&#34;the-chosen-one&#34;&gt;The chosen one&lt;/h4&gt;
&lt;p&gt;After doing a bit o research, I&amp;rsquo;ve stumbled across &lt;a href=&#34;https://codeberg.org/&#34;&gt;Codeberg&lt;/a&gt;. There is a general feel of transparency around this. It is hosted in Germany, known for taking civil rights seriously including GDPR.&lt;/p&gt;
&lt;p&gt;For one, they make a point of how to switch away from their services - which is a sign of confidence in their own product which I like. The interface is fairly straight-forward (Github has changed a -lot- over the last years leading to a lot of functionality that is not relevant for me and just serves to clutter up the interface) and seems to cover what I need (I have not yet figured out how to set up a container registry, but I might have a different solution to this, that is actually more to my liking).&lt;/p&gt;
&lt;h4 id=&#34;migrating-the-code&#34;&gt;Migrating the code&lt;/h4&gt;
&lt;p&gt;I chose to use their migration tool to siphon the code from Github using a personal access token. I now have the full commit history - and as for fresh starts, I removed the old branches and PR&amp;rsquo;s (they are still working for the old posts since they point to Github).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, I am now &lt;a href=&#34;https://codeberg.org/Tofticles&#34;&gt;Tofticles&lt;/a&gt; on Codeberg!&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Setting up Github Docker Registry</title>
      <link>http://localhost:1313/2024/setting-up-github-docker-registry/</link>
      <pubDate>Thu, 14 Mar 2024 07:27:27 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/setting-up-github-docker-registry/</guid>
      
        <description>&lt;p&gt;Now that I have a dockerfile, I need to use this for something. The end goal is to be able to pull the images from a registry, generate a container from it and then deploy it to the K3S cluster.&lt;/p&gt;
&lt;h2 id=&#34;the-outline-of-the-solution&#34;&gt;The outline of the solution&lt;/h2&gt;
&lt;p&gt;I want to have the pipeline build the image from the dockerfile and push it to a registry somewhere, where my &amp;lsquo;deployment centre&amp;rsquo; (Okay, for now it is just me pushing a button) can pull the image and deploy a new version.&lt;/p&gt;
&lt;h4 id=&#34;why-not-automatic-deployment&#34;&gt;Why not automatic deployment?&lt;/h4&gt;
&lt;p&gt;Well, for a development/testing environment, sure - I will do that later. But to get there, I either need to have a local registry and git repository (since my deployment centre is not on the public internet, so triggering it from a Github Action is an issue) or some kind of public access to my setup, which I am not terribly keen on.&lt;/p&gt;
&lt;p&gt;Having things deploy directly to production, I believe to be counter to the needs of everyone but developers.&lt;/p&gt;
&lt;h4 id=&#34;choosing-a-registry&#34;&gt;Choosing a registry&lt;/h4&gt;
&lt;p&gt;So, it used to be easy to choose &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;. However, I have both technical, economic and moral issues with Docker as a company. I loathe the VC-backed approach to the world. It produces all the wrong results and motivations. I am not terribly up to date with their shenanigans, but it seems Docker has decided to delete several free organizations as well as using trackers, extensively. No, thank you.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s Azure, AWS and Google. Yeah, no. I&amp;rsquo;m actively trying to avoid the big three cloud things.&lt;/p&gt;
&lt;p&gt;So, that leaves Gitlab and Github for public registries that I am familiar with - while I&amp;rsquo;m by no means fond of Github, I will for now use their registry while I plan my escape completely from the clutches of them. For one, since I already have the code hosted on Github, pushing to the registry is seamless from a Github Action.&lt;/p&gt;
&lt;h4 id=&#34;setting-up-a-github-action&#34;&gt;Setting up a Github Action&lt;/h4&gt;
&lt;p&gt;As is probably evident from the &lt;a href=&#34;https://github.com/goblinhero/Anex/blob/main/.github/workflows/docker-publish.yml&#34;&gt;repository&lt;/a&gt; - this is basically just an applied template - I did very little. Mostly, I just had to move the dockerfile into the root of the project to avoid having to adjust the paths in the docker file.&lt;/p&gt;
&lt;p&gt;Very seamless experience and quite a lot easier to get up and running than anticipated. And now you can see the very &lt;a href=&#34;https://github.com/goblinhero/Anex/pkgs/container/anex/190450843?tag=main&#34;&gt;first&lt;/a&gt; image of Anex (it currently does not have a connection to a valid database and that will be the next hurdle).&lt;/p&gt;
&lt;p&gt;Still a lot to do with semantic versioning and general fleshing out of description and such, but for now, I just needed to get a registry that I can pull from.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Migrating Application to K8S</title>
      <link>http://localhost:1313/2024/migrating-application-to-k8s/</link>
      <pubDate>Wed, 13 Mar 2024 13:40:58 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/migrating-application-to-k8s/</guid>
      
        <description>&lt;p&gt;Now that I have the K3S cluster up and running, the time has come to adjust the Anex project to be deployable to it. You can find the code for this change &lt;a href=&#34;https://github.com/goblinhero/Anex/pull/33&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not going to explain the idea behind Docker - plenty of information about that online, already. Instead, I&amp;rsquo;m going to focus on the dockerfile that I ended up with after much tinkering - there are a lot of different ways to set it all up, and this is only one viable approach.&lt;/p&gt;
&lt;h4 id=&#34;the-entire-dockerfile&#34;&gt;The entire dockerfile&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

COPY [&amp;#34;Anex.Api/Anex.Api.csproj&amp;#34;, &amp;#34;Anex.Api/&amp;#34;]
RUN dotnet restore &amp;#34;Anex.Api/Anex.Api.csproj&amp;#34;

COPY [&amp;#34;Anex.Domain.Tests/Anex.Domain.Tests.csproj&amp;#34;, &amp;#34;Anex.Domain.Tests/&amp;#34;]
RUN dotnet restore &amp;#34;Anex.Domain.Tests/Anex.Domain.Tests.csproj&amp;#34;

COPY . .

WORKDIR &amp;#34;/src/Anex.Domain.Tests&amp;#34;
RUN dotnet test &amp;#34;Anex.Domain.Tests.csproj&amp;#34;

WORKDIR &amp;#34;/src/Anex.Api&amp;#34;
RUN dotnet build &amp;#34;Anex.Api.csproj&amp;#34; -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish &amp;#34;Anex.Api.csproj&amp;#34; -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT [&amp;#34;dotnet&amp;#34;, &amp;#34;Anex.Api.dll&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Quite a bit going on here, I&amp;rsquo;ll try to explain my thoughts for each section, below.&lt;/p&gt;
&lt;h4 id=&#34;why-two-dotnet-images&#34;&gt;Why two dotnet images?&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
ARG BUILD_CONFIGURATION=Release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So - there are basically two phases to creating the final image: Building the sourcecode into binaries and running these binaries in another image. Each has it&amp;rsquo;s own prereqs and constraints. The build phase only happens once (at some point, in the CI/CD pipeline) while the final image will be used whenever a new container is spun up. While we are building the final image, we need access to the dotnet SDK (the build/sdk image above) - however, this is not needed once the application has been built and packaged. At that point we only need the base/aspnet image with the dotnet Core runtime. The result is that the docker image that will be used to have the app running in K3S will be much smaller and leaner.&lt;/p&gt;
&lt;h4 id=&#34;why-three-copy-commands&#34;&gt;Why three COPY commands?&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WORKDIR /src

COPY [&amp;#34;Anex.Api/Anex.Api.csproj&amp;#34;, &amp;#34;Anex.Api/&amp;#34;]
RUN dotnet restore &amp;#34;Anex.Api/Anex.Api.csproj&amp;#34;

COPY [&amp;#34;Anex.Domain.Tests/Anex.Domain.Tests.csproj&amp;#34;, &amp;#34;Anex.Domain.Tests/&amp;#34;]
RUN dotnet restore &amp;#34;Anex.Domain.Tests/Anex.Domain.Tests.csproj&amp;#34;

COPY . .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, this is solely a performance/storage optimization - Docker has multiple cached layers and detection of non-changed files. Basically, by only copying the .csproj files before doing &lt;code&gt;dotnet restore&lt;/code&gt;, we can exploit the caching of NuGet packages.&lt;/p&gt;
&lt;p&gt;The end-result is that at this point in the docker file, all the source code and referenced NuGet packages will be in the &lt;code&gt;/src&lt;/code&gt; folder inside the build container.&lt;/p&gt;
&lt;h4 id=&#34;building-and-testing&#34;&gt;Building and testing&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WORKDIR &amp;#34;/src/Anex.Domain.Tests&amp;#34;
RUN dotnet test &amp;#34;Anex.Domain.Tests.csproj&amp;#34;

WORKDIR &amp;#34;/src/Anex.Api&amp;#34;
RUN dotnet build &amp;#34;Anex.Api.csproj&amp;#34; -c $BUILD_CONFIGURATION -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish &amp;#34;Anex.Api.csproj&amp;#34; -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT [&amp;#34;dotnet&amp;#34;, &amp;#34;Anex.Api.dll&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, the rest is fairly self-explanatory. First we run tests - we want it to fail as fast as possible if there are any broken tests. Next we build the API and then publish the resulting binaries into the &lt;code&gt;/app/publish&lt;/code&gt; folder. Finally, we take the runtime image and create a new image including the binaries and set the entry point (which will be executed everytime a new container is created from the iamge).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This dockerfile took a lot of tinkering to get right - and also to get it working in my local IDE for debugging - there are a gazzillion ways to get it to work, but I&amp;rsquo;m fairly satisfied with the result.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>AZ-204 Certification progress</title>
      <link>http://localhost:1313/2024/az-204-certification-progress/</link>
      <pubDate>Tue, 12 Mar 2024 10:56:58 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/az-204-certification-progress/</guid>
      
        <description>&lt;p&gt;At my employer, we have created a study group to prepare for the &lt;a href=&#34;https://learn.microsoft.com/en-us/credentials/certifications/exams/az-204/&#34;&gt;AZ-204&lt;/a&gt; certification, centered around developing applications on the Azure platform. As may be expected from my previous rants around certifications and Microsoft in general, it will probably not surprise that I would like to have words.&lt;/p&gt;
&lt;p&gt;First off, the entire exam is centered around whether you are able to work with Azure, not really about making applications. So, we are talking about deploying things, configuring things, trying to guess what Microsoft&amp;rsquo;s engineers were thinking when they created their API&amp;rsquo;s for Azure and so on. In my opinion - this is DevOps - and something you are (hopefully) automating the crap out of if you are doing this professionally.&lt;/p&gt;
&lt;p&gt;Secondly, there are a -lot- of questions around licensing and pricing. Read: &amp;ldquo;Which most cost-effective license allows for having deployment slots?&amp;rdquo;. This has -nothing- to do with developing, but trying to grasp the idiosyncrasies of Microsoft and licensing. Each part of Azure has it&amp;rsquo;s own licensing options and there is no rhyme or reason across products. So, basically, you are left with trying to memorize whether &amp;lsquo;Premium&amp;rsquo; for this product includes an isolated VPN network.&lt;/p&gt;
&lt;p&gt;Thirdly, the practise exams on &lt;a href=&#34;https://learn.microsoft.com&#34;&gt;Microsoft Learn&lt;/a&gt; has a very limited pool of questions, so if you take three practise exams, you&amp;rsquo;ll have encountered all questions - and they do not (insert explicitive here) even closely resemble the actual exam. So, in essense, worthless.&lt;/p&gt;
&lt;h4 id=&#34;enter-third-party-sites&#34;&gt;Enter third party sites&lt;/h4&gt;
&lt;p&gt;There are several providers of materials to help you with preparing for the exams (including extremely boring videos) - &lt;a href=&#34;https://www.udemy.com/&#34;&gt;Udemy&lt;/a&gt;, &lt;a href=&#34;https://www.whizlabs.com/&#34;&gt;Whizlabs&lt;/a&gt; and so on. Based on colleagues&amp;rsquo; opinions that passed the exam, I went with Whizlabs and a month worth of subscription. Judging by how poorly worded the questions are - they are probably pretty close to what I&amp;rsquo;ll encounter in the exams.&lt;/p&gt;
&lt;p&gt;So, consider my next week a cram-session to get as much rote learning into my skull to be able to pass the exam.&lt;/p&gt;
&lt;p&gt;There is something rotten in the industry - and certifications at present are a part of the problem.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Installing K3s</title>
      <link>http://localhost:1313/2024/installing-k3s/</link>
      <pubDate>Tue, 12 Mar 2024 09:49:23 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/installing-k3s/</guid>
      
        <description>&lt;p&gt;I had been doing some reading on &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; and &lt;a href=&#34;https://www.rancher.com/&#34;&gt;Rancher&lt;/a&gt; and stumbled over the &lt;a href=&#34;https://k3s.io&#34;&gt;K3S&lt;/a&gt; project by the Rancher people. It&amp;rsquo;s pretty much perfect for me, getting the full K8S in a nicely wrapped package where I don&amp;rsquo;t actually need to understand all the moving parts of the full Kubernetes experience (and all the choices between competing choices within).&lt;/p&gt;
&lt;p&gt;There is a number of ways to install K3S, but since I wanted to use Rancher on top of it (or beside it? Somewhere in the neighbourhood?), there are a few caveats due to the different versions.&lt;/p&gt;
&lt;h2 id=&#34;prereqs&#34;&gt;Prereqs&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need to have curl installed on all nodes as well as either disabling firewalls on the nodes or allowing &lt;a href=&#34;https://docs.k3s.io/installation/requirements#networking&#34;&gt;specific ports&lt;/a&gt;. Since I&amp;rsquo;m using Ubuntu and having no public access - I went with disabling &lt;code&gt;ufw&lt;/code&gt; entirely:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo ufw disable&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;extra-parameters-for-the-k3s-install-on-the-control-plane-node&#34;&gt;Extra parameters for the K3S install on the control plane node&lt;/h2&gt;
&lt;h4 id=&#34;install_k3s_version&#34;&gt;INSTALL_K3S_VERSION&lt;/h4&gt;
&lt;p&gt;I took at look at Rancher&amp;rsquo;s &lt;a href=&#34;https://www.suse.com/suse-rancher/support-matrix/all-supported-versions/rancher-v2-8-2/&#34;&gt;support matrix&lt;/a&gt; - and at the time of writing the 2.8.2 version supports K3S in version v1.27 while K3S latest is v1.28, so I had to supply an extra parameter for the K3S script - the &lt;code&gt;INSTALL_K3S_VERSION&lt;/code&gt; parameter. K3S follows the Kubernetes versions with an extra version part for their own patches/hotfixes, so for the one I needed working with v1.27 of Kubernetes qua the Rancher support, I looked at the &lt;a href=&#34;https://github.com/k3s-io/k3s/releases&#34;&gt;releases&lt;/a&gt; for K3S for the latest patch - at the time of writing this is &lt;code&gt;v1.27.11+k3s1&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;--cluster-init&#34;&gt;&amp;ndash;cluster-init&lt;/h4&gt;
&lt;p&gt;This is optional, but allows for a later upgrade to a High Availability (HA) cluster (basically having at least 3 control plane nodes). For now, I&amp;rsquo;ll skip this as I don&amp;rsquo;t plan to go beyond one control plane nodes and two agent nodes&lt;/p&gt;
&lt;h4 id=&#34;k3s_kubeconfig_mode&#34;&gt;K3S_KUBECONFIG_MODE&lt;/h4&gt;
&lt;p&gt;The default mode for the kubeconfig is &lt;code&gt;600&lt;/code&gt; which means only a root user can read the file. Since I plan to use Rancher on top, I&amp;rsquo;ll change this to &lt;code&gt;644&lt;/code&gt; to allow unpriviledged users to read it.&lt;/p&gt;
&lt;h4 id=&#34;the-resulting-command-to-install-the-control-plane-of-k3s&#34;&gt;The resulting command to install the control plane of K3S&lt;/h4&gt;
&lt;p&gt;I ran this as a root user - not entirely sure it is needed, but I was not interested in fiddling with permissions and a half-installed K3S.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.27.11+k3s1 K3S_KUBECONFIG_MODE=&amp;quot;644&amp;quot; sh -s - server&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;extra-parameters-for-the-k3s-install-on-the-agent-nodes&#34;&gt;Extra parameters for the K3S install on the agent nodes&lt;/h2&gt;
&lt;h4 id=&#34;install_k3s_version-1&#34;&gt;INSTALL_K3S_VERSION&lt;/h4&gt;
&lt;p&gt;This needs to match the version of the master node - in my case &lt;code&gt;v1.27.11+k3s1&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;k3s_url&#34;&gt;K3S_URL&lt;/h4&gt;
&lt;p&gt;This needs to hit port 6443 on (one of) your control plane node(s). For my simple setup, simply the local IP-address of the control plane.&lt;/p&gt;
&lt;h4 id=&#34;k3s_token&#34;&gt;K3S_TOKEN&lt;/h4&gt;
&lt;p&gt;The token is created when installing the first control plane node and can be located with this simple command - simply copy the result for the K3S_TOKEN parameter:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cat /var/lib/rancher/k3s/server/token&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-resulting-command-to-install-the-agent-nodes-of-k3s&#34;&gt;The resulting command to install the agent nodes of K3s&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.27.11+k3s1 K3S_URL=192.168.0.71:6443 K3S_TOKEN=the-token-from-control-plane sh -&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And after doing that twice - once for each agent node, everything was working - I verified by issuing &lt;code&gt;kubectl get nodes&lt;/code&gt; on the control plane node.&lt;/p&gt;
&lt;p&gt;For something as complicated as Kubernetes, this is manageable even for a newbie such as myself (to both Linux and Kubernetes).&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubernetes Choices</title>
      <link>http://localhost:1313/2024/kubernetes-choices/</link>
      <pubDate>Thu, 07 Mar 2024 12:28:07 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/kubernetes-choices/</guid>
      
        <description>&lt;p&gt;Alright, so &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; (K8S) is.. complicated. Lots of moving parts, different utilities, CLIs etc. etc. I am not too heavily invested in deep-diving into all the specifics and kinda (for now, at least) just want to get something up and running. Choosing between a myriad of options for storing the state of the cluster.. Not so much.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;k3s.io&#34;&gt;K3S&lt;/a&gt; which is kinda what Ubuntu is for Linux. A lot of opinionated choices to have you worrying about as little as possible getting this beast up and running. You still have the option to do all the things you can do with the full K8S setup, but you have very sensible defaults that will get you 80-90% of the way.&lt;/p&gt;
&lt;p&gt;I find the analogy with Ubuntu pretty neat, because you still need to understand the basics of what K8S is and the fundemental concepts to understand what K3S does - like you still need to know what a command-line is and how to operate it to have &amp;lsquo;fun&amp;rsquo; in Ubuntu. In contrast with Ubuntu (and where the analogy kinda breaks down) is that K3S is the lightweight distro of K8S - or more consisely, it is more like a barebone version (but still fully compliant with the specs).&lt;/p&gt;
&lt;p&gt;To understand the basics of K8S, I highly recommend &lt;a href=&#34;https://www.youtube.com/watch?v=s_o8dwzRlu4&#34;&gt;TechWorld with Nana&lt;/a&gt;. She has a ton of videos, but this one I found short and still comprehensive enough to understand the basic concepts. (She was recommended to me by a former colleague who has extensive DevOps experience).&lt;/p&gt;
&lt;p&gt;Getting K3S installed on my nodes&amp;hellip; I&amp;rsquo;ll save that for another post. I have technically not done so, yet.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Microsoft Learn AI Crap</title>
      <link>http://localhost:1313/2024/microsoft-learn-ai-crap/</link>
      <pubDate>Fri, 01 Mar 2024 13:34:38 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/microsoft-learn-ai-crap/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;m in the proces of grabbing the AZ-204 certification. As part of that, Microsoft encourages you to use their &lt;a href=&#34;https://learn.microsoft.com&#34;&gt;Learn&lt;/a&gt; platform.&lt;/p&gt;
&lt;p&gt;They do make a point (disclaimer) that they use AI to generate the courses here, but assure us that they are then vetted by a human afterwards. And this is going exactly as you&amp;rsquo;d expect it to&amp;hellip;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve PDF&amp;rsquo;ed this particular &lt;a href=&#34;https://learn.microsoft.com/en-us/training/modules/develop-for-storage-cdns/4-azure-cdn-libraries-dotnet&#34;&gt;gem&lt;/a&gt;, since it will (hopefully) be updated at some point.&lt;/p&gt;
&lt;p&gt;At the time of writing - it includes this code snippet:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private static void ListProfilesAndEndpoints(CdnManagementClient cdn)
{
    // List all the CDN profiles in this resource group
    var profileList = cdn.Profiles.ListByResourceGroup(resourceGroupName);
    foreach (Profile p in profileList)
    {
        Console.WriteLine(&amp;#34;CDN profile {0}&amp;#34;, p.Name);
        if (p.Name.Equals(profileName, StringComparison.OrdinalIgnoreCase))
        {
            // Hey, that&amp;#39;s the name of the CDN profile we want to create!
            profileAlreadyExists = true;
        }

        //List all the CDN endpoints on this CDN profile
        Console.WriteLine(&amp;#34;Endpoints:&amp;#34;);
        var endpointList = cdn.Endpoints.ListByProfile(p.Name, resourceGroupName);
        foreach (Endpoint e in endpointList)
        {
            Console.WriteLine(&amp;#34;-{0} ({1})&amp;#34;, e.Name, e.HostName);
            if (e.Name.Equals(endpointName, StringComparison.OrdinalIgnoreCase))
            {
                // The unique endpoint name already exists.
                endpointAlreadyExists = true;
            }
        }
        Console.WriteLine();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now. There are several problems, here. For one, it does not compile. Second, the method body does not reflect the method name. Third, several variables are not declared. And of course, the same problems are present for the next two code snippets&amp;hellip;&lt;/p&gt;
&lt;p&gt;Apologists will say: &amp;ldquo;Oh, that is just the fault of the reviewer - they had a bad day - and it is no problem, it will get fixed&amp;rdquo;. The thing is - Microsoft Learn is supposed to be the authorative source of truth.&lt;/p&gt;
&lt;p&gt;Dear Microsoft, you are eroding trust in your platform by not spending the necessary time and resources to make absolutely sure, that your material is accurate, to the point and uses best practises. Documentation is paramount for developers to want to use (and trust) your platform - you are failing at this.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve downloaded the complete page &lt;a href=&#34;http://localhost:1313/images/2024/Interact_with_Azure.pdf&#34;&gt;here&lt;/a&gt; for arguments sake.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Detour - Getting RDP to Work on Ubuntu</title>
      <link>http://localhost:1313/2024/detour-getting-rdp-to-work/</link>
      <pubDate>Thu, 29 Feb 2024 16:02:40 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/detour-getting-rdp-to-work/</guid>
      
        <description>&lt;p&gt;So, as I wrote previously, I failed to get RDP to work for the cluster nodes. Being somewhat stubborn, I did some digging and on one of the Ubuntu forums, I found one that had a solution that coupled with a bit of tinkering from another answer got me all I wanted. (For the full explanation and a bit of background, look &lt;a href=&#34;https://askubuntu.com/questions/1407444/ubuntu-22-04-remote-desktop-headless&#34;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;h2 id=&#34;enter-xrdp&#34;&gt;Enter XRDP&lt;/h2&gt;
&lt;p&gt;XRDP is an alternative to the baked-in RDP in Ubuntu that I have been unable to use as my nodes run headless. XRDP allows for connections using both the Windows native mstsc RDP client and Remmina and it does not require a live session nor having a separate username/pass combo.&lt;/p&gt;
&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;
&lt;p&gt;Simply run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt install xrdp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Followed by:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo systemctl status xrdpex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To check that it is running.&lt;/p&gt;
&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;
&lt;p&gt;If you do nothing, it will use the old Gnome desktop, to avoid this, create a file called &lt;code&gt;.xsessionrc&lt;/code&gt; in your home directory with the following contents:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export GNOME_SHELL_SESSION_MODE=ubuntu
export XDG_CURRENT_DESKTOP=ubuntu:GNOME
export XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that was all there was to it. I now have the desktop I wanted using the Windows RDP client which makes some tasks around running virtual machines quite a bit easier for a rookie Linux user.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Homecluster Operating System</title>
      <link>http://localhost:1313/2024/homecluster-operating-system/</link>
      <pubDate>Wed, 28 Feb 2024 09:09:24 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/homecluster-operating-system/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;ve dabbled in Linux before, but it is maybe 8-10 years ago and things have changed. So, I consider myself a rookie and will go for middle-of-the-road solutions to what I need. So, not highly optimized, barebones nor highly secure setup is the aim here. I want to get stuff up and running and thus, I aim for solutions/frameworks with a lot of support, ease-of-use and an active community.&lt;/p&gt;
&lt;p&gt;Natural choice is then currently Ubuntu 22.04 LTS and I went with their &lt;a href=&#34;https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview&#34;&gt;guide here&lt;/a&gt;. I had an old Sandisk USB mini SSD at around 17 GB which worked for the task of making the bootable image. With the Thinkcentre cluster nodes, I simply had to have it boot from the image to replace the Windows installation. It went without hickups of any kind (except the Settings widget kept crashing - I suspect because I was not connected to the internet during install).&lt;/p&gt;
&lt;p&gt;The general idea is that the nodes should only be connected to the (cheap, crap - pick your adjective) ISP-supplied router via cabled ethernet and to power - so, headless.&lt;/p&gt;
&lt;h2 id=&#34;rookie-mistake-1-rdp&#34;&gt;Rookie mistake #1 RDP&lt;/h2&gt;
&lt;p&gt;So, as mentioned, I wasn&amp;rsquo;t connected to the internet during install and since the Settings widget kept crashing, I had to connect the nodes one at a time to the internet to get RDP set up. I am not your typical nerd with a drawer full of old keyboards and monitors.. So, I had to physically move my screen and keyboard into the living room next to the router which also meant that I could not at the same time use my desktop for testing. (Red flags should be raised at this point along with blaring sirens).&lt;/p&gt;
&lt;p&gt;Anyway, once connected, I did the usual updates with &lt;code&gt;apt-get&lt;/code&gt; command and checked the checkboxes (that started working once it had network access) for Remote control (RDP). Repeat for the other two nodes and power them on sitting right beside the router. Moved the monitor and periphials back to the desktop.. And I could not connect to the nodes.&lt;/p&gt;
&lt;p&gt;Using the router, I could find their IP-addresses and I could ping them, but no RDP connection with &lt;code&gt;mstsc&lt;/code&gt; on Windows. Hmm.. This was not expected. Maybe a problem with the Windows RDP-client. Next step was activating the WSL and getting Ubuntu, installing Remmina (&lt;code&gt;sudo apt-get install remmina&lt;/code&gt;) and spinning this up. Connection refused. Hmm!&lt;/p&gt;
&lt;p&gt;Much searching the interwebs for the why and from a comment on a shady forum to an unrelated question (yes, the internet is dying, search-wise), it dawned on me. RDP allows you to connect to a user&amp;rsquo;s -live- session on Ubuntu and not like the Windows approach of &amp;lsquo;Ain&amp;rsquo;t anyone in the office, but you go on ahead and connect to this machine, Johnny&amp;rsquo;. Very much a feature, not a bug.&lt;/p&gt;
&lt;h2 id=&#34;rookie-mistake-2-ssh&#34;&gt;Rookie mistake #2 SSH&lt;/h2&gt;
&lt;p&gt;Okay, so back to basics. SSH&amp;rsquo;ing into the nodes (which was my long-term plan, anyway, since I just need a terminal to service the Kubernetes install, later). Since I had already actived the WSL on my Windows box, I tried to SSH into one of the nodes. Connection refused. Doh. I had not installed the SSH server on the nodes&amp;hellip; Well, back to moving hardware back into the living room, connect to the nodes one at a time, install openssh server (&lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;) - this time checking that it was actually running. Then moving the hardware back to the Windows box and finally..&lt;/p&gt;
&lt;h2 id=&#34;great-success&#34;&gt;Great success&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2024/heureka.png&#34; alt=&#34;&amp;lsquo;Home cluster in all it&amp;rsquo;s glory&amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, time-usage for getting it up and running:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0:45 - Getting the Ubuntu image and making a bootable image with &lt;a href=&#34;https://etcher.balena.io/&#34;&gt;&amp;lsquo;Balena&amp;rsquo;&lt;/a&gt; - including rummaging for the USB SSD&lt;/li&gt;
&lt;li&gt;4:25 - Waiting for UPS to arrive (they had a time window of 11:50-13:50 and arrived at 16:15&amp;hellip;)&lt;/li&gt;
&lt;li&gt;0:30 - Unpacking and installing Ubuntu on the nodes&lt;/li&gt;
&lt;li&gt;1:30 - Fiddling with updates, RDP/SSH including moving hardware around&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An afternoon well spent, I feel. Next up is installing &lt;a href=&#34;https://kubernetes.io/&#34;&gt;K8s&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Homecluster Hardware</title>
      <link>http://localhost:1313/2024/homecluster-hardware/</link>
      <pubDate>Wed, 28 Feb 2024 07:59:52 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/homecluster-hardware/</guid>
      
        <description>&lt;p&gt;I&amp;rsquo;ve been talking with a few former colleague about what to do for hardware for a cheap home cluster. I could have gone with the cheap option and used the virtual home cluster all running on my own machine. But that&amp;rsquo;s boring and too far from what I want to know about to really fit my needs. I could have gone with one of the new AMD Ryzen NUCs and virtualized a few nodes, but still.. feels wrong. I -want- to have the problems of networking between physical machines.&lt;/p&gt;
&lt;p&gt;So, I&amp;rsquo;m old-school and a scavenger - deal with it. Buying three new small machines&amp;hellip; Well, we only have the one planet, and it seems a bit of a waste, cash-wise. Enter &lt;a href=&#34;https://www.refurbed.dk/%22&#34;&gt;Refurbed&lt;/a&gt; for refurbished, decommisioned office machines. I was lucky to find three Lenovo Thinkcentre 910q tiny in excellent condition for a total of 3.866,43 DKK including shipping (roughly 520€/560$):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i5-6500T 2.5 GHz 4 core CPU (the T is important as it means it is optimized for low power usage - max usage is rated at 35W where the non-T model is rated at 65W)&lt;/li&gt;
&lt;li&gt;16 GB RAM (DDR4 2400 MHz - upgradable to 32 GB if need be)&lt;/li&gt;
&lt;li&gt;256 GB SSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I realize that I could have gotten 3 new AMD Ryzen 3/Intel N100 mini-PCs with (overall) better specs and lower power consumption at roughly the same price. But here&amp;rsquo;s the thing - build-quality is not even remotely in the same league. Enterprise models are built to be serviceable, durable and all-around no-hassle. Just for comparison look at how heavy these machines are (1.32 kg each vs. around 810 g for the new machines) - the chassis is metal. Clearly meant for large enterprises that don&amp;rsquo;t want to shift hardware too often for their office workers or waste time servicing them physically. And just look at the beauty:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/2024/cluster.jpg&#34; alt=&#34;The home cluster&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next up, installing a host OS &lt;a href=&#34;https://ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; on the three.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>New Beginnings</title>
      <link>http://localhost:1313/2024/new-beginnings/</link>
      <pubDate>Wed, 28 Feb 2024 07:31:35 +0100</pubDate>
      
      <guid>http://localhost:1313/2024/new-beginnings/</guid>
      
        <description>&lt;p&gt;It&amp;rsquo;s been an eventful few months. My employer handed me a small&amp;rsquo;ish project that had me delving into real life practise with Azure, Terraform and Azure Functions. And now that I&amp;rsquo;ve walked the talk, done the work and cried a lot - I&amp;rsquo;m confident in saying that I&amp;rsquo;m not going to build anything for myself on Azure.&lt;/p&gt;
&lt;p&gt;This is not a nag at my employer - they are simply delivering what businesses and the public sector are asking for. But it&amp;rsquo;s simply too much crying for my hobbies. Wondering why things do not work as advertised, why things deprecate faster than I can say &amp;lsquo;Wait, what?!&amp;rsquo; and why things then suddenly work without me having done anything different besides simply retrying.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve had to tell myself that there is a reason, I&amp;rsquo;m being paid for my work - they could not get anyone to do it for free.&lt;/p&gt;
&lt;p&gt;Anyway, I&amp;rsquo;m going to shift focus on this blog and with my own project - and try something extremely stupid. I&amp;rsquo;m going to build a home-cluster, do something-something with Kubernetes with something-something Rancher&amp;hellip; Compared to Azure - at least I won&amp;rsquo;t rack up any kind of debt besides the electricity bill.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>